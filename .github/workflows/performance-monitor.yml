name: Performance Monitoring

on:
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'src/**'

env:
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  lighthouse-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      
    steps:
      - uses: actions/checkout@v3.5.3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3.8.1
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install
          
      - name: Build application
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: pnpm build
        
      - name: Start Next.js server
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          pnpm start &
          echo "Waiting for Next.js server to be ready..."
          
          # Wait for server to be ready with timeout
          timeout=60
          while ! curl -s http://localhost:3000 > /dev/null; do
            if [ $timeout -le 0 ]; then
              echo "Timeout waiting for server to start"
              exit 1
            fi
            echo "Waiting for server... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done
          
          echo "Server is ready!"

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: .github/lighthouse-config.json
          runs: 3
          
      - name: Create Issue on Low Scores
        if: success()
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Find the latest Lighthouse report
              const reportsDir = '.lighthouseci';
              const jsonFiles = fs.readdirSync(reportsDir)
                .filter(file => file.endsWith('.json'))
                .map(file => path.join(reportsDir, file));
              
              if (jsonFiles.length === 0) {
                console.log('No Lighthouse reports found');
                return;
              }
              
              // Get the most recent report
              const reportPath = jsonFiles[jsonFiles.length - 1];
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const scores = {
                Performance: Math.round(report.categories.performance.score * 100),
                Accessibility: Math.round(report.categories.accessibility.score * 100),
                SEO: Math.round(report.categories.seo.score * 100),
                'Best Practices': Math.round(report.categories['best-practices'].score * 100)
              };
              
              const lowScores = Object.entries(scores)
                .filter(([_, score]) => score < 90)
                .map(([category, score]) => `- ${category}: ${score}%`)
                .join('\n');
              
              if (lowScores) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'ðŸš¨ Lighthouse Performance Alert',
                  body: `## Performance Monitoring Alert
                  
                  The following scores are below the 90% threshold:
                  
                  ${lowScores}
                  
                  ### All Scores:
                  - Performance: ${scores.Performance}%
                  - Accessibility: ${scores.Accessibility}%
                  - SEO: ${scores.SEO}%
                  - Best Practices: ${scores['Best Practices']}%
                  
                  ### Next Steps
                  1. Review the detailed report in the workflow artifacts
                  2. Focus on improving the low-scoring areas
                  3. Consider running Lighthouse locally to test improvements
                  
                  [View detailed report](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
                  labels: ['performance']
                });
              }
            } catch (error) {
              console.log('Error creating issue:', error.message);
              core.setFailed('Failed to create performance issue');
            } 